# Telegraf configuration

# Telegraf is entirely plugin driven. All metrics are gathered from the
# declared plugins.

# Even if a plugin has no configuration, it must be declared in here
# to be active. Declaring a plugin means just specifying the name
# as a section with no variables. To deactivate a plugin, comment
# out the name and any variables.

# Use 'telegraf -config telegraf.toml -test' to see what metrics a config
# file would generate.

# One rule that plugins conform to is wherever a connection string
# can be passed, the values '' and 'localhost' are treated specially.
# They indicate to the plugin to use their own builtin configuration to
# connect to the local system.

# NOTE: The configuration has a few required parameters. They are marked
# with 'required'. Be sure to edit those to make this configuration work.

# Tags can also be specified via a normal map, but only one form at a time:
[tags]
  # dc = "us-east-1"

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all plugins
  interval = "10s"
  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Default data flushing interval for all outputs. You should not set this below
  # interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "10s"
  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  # Run telegraf in debug mode
  debug = {{ debug_mode }}
  # Override default hostname, if empty use os.Hostname()
  hostname = "{{ inventory_hostname }}"


###############################################################################
#                                  OUTPUTS                                    #
###############################################################################

[outputs]
{% for item_value in db_apps_mapping %}

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  # The full HTTP endpoint URL for your InfluxDB instance
  # Multiple urls can be specified for InfluxDB cluster support.
  urls = [ "http://{{ inventory_hostname }}:8086" ] # required
  # The target database for metrics (telegraf will create it if not exists)
  database = "{{ item_value.db_name }}" # required
  # Precision of writes, valid values are n, u, ms, s, m, and h
  # note: using second precision greatly helps InfluxDB compression
  precision = "s"

  # Connection timeout (for the connection with InfluxDB), formatted as a string.
  # If not provided, will default to 0 (no timeout)
  timeout = "5s"
  username = "{{ statsd_influxdb_user }}"
  password = "{{ statsd_influxdb_passwd }}"
  # Set the user agent for the POSTs (can be useful for log differentiation)
  # user_agent = "telegraf"

{% if loop.last %}
  [outputs.influxdb.tagdrop]
    app = [{% for item in local_apps %}"{{ item }}",{% endfor %} {% for item in wonk_apps %}"{{ item }}",{% endfor %} {% for item in analytics_apps %}"{{ item }}",{% endfor %} {% for item in content_apps %}"{{ item }}",{% endfor %} {% for item in billing_apps %}"{{ item }}",{% endfor %} {% for item in inbound_apps %}"{{ item }}"{% if not loop.last %},{% endif %} {% endfor %}]
{% else %}
  [outputs.influxdb.tagpass]
    app = [{% for item_values in item_value.app_name %}"{{ item_values }}"{% if not loop.last %},{% endif %}{% endfor %}]
{% endif %}
{% endfor %}

###############################################################################
#                                  PLUGINS                                    #
###############################################################################


###############################################################################
#                              SERVICE PLUGINS                                #
###############################################################################

# Statsd Server
[[inputs.statsd]]
  # Address and port to host UDP listener on
  service_address = ":{{ statsd_service_port }}"
  # Delete gauges every interval (default=false)
  delete_gauges = true
  # Delete counters every interval (default=false)
  delete_counters = true
  # Delete sets every interval (default=false)
  delete_sets = true
  # Delete timings & histograms every interval (default=true)
  delete_timings = true
  # Percentiles to calculate for timing & histogram stats
  percentiles = [90]

  ## convert measurement names, "." to "_" and "-" to "__"
  # convert_names = true

  ### If matching multiple measurement files, this string will be used to join the matched values.
  # separator = "_"

  # New configs that come in with Telegraf 0.10.x
  #
  name_prefix = "statsd_"
  # name_suffix = "_metric"
  # name_override = "statsd_metric"
  #
  # [inputs.cpu.tags]
  #   tag1 = "statsd"
  #   tag2 = "metric"

  templates = [
      "nsq.*.topic.*.channel.* app.host.measurement.topic_name.measurement.channel_name.measurement*",
      "nsq.*.topic.* app.host.measurement.topic_name.measurement*",
      "nsq.* app.host.measurement*",
      "app.measurement*"
  ]

  # Number of UDP messages allowed to queue up, once filled,
  # the statsd server will start dropping packets
  allowed_pending_messages = 10000

  # Number of timing/histogram values to track per-measurement in the
  # calculation of percentiles. Raising this limit increases the accuracy
  # of percentiles but also increases the memory usage and cpu time.
  percentile_limit = 1000

  ## UDP packet size for the server to listen for. This will depend on the size
  ## of the packets that the client is sending, which is usually 1500 bytes.
  udp_packet_size = 1500
